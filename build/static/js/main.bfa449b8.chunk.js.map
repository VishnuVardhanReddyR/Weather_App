{"version":3,"sources":["components/weather.component.jsx","components/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","lat","long","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadWeather","type","name","autoComplete","placeholder","API_KEY","App","getWeather","e","a","async","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","coord","lon","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","err","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","this","clouds","Math","floor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfa449b8.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Weather = (props) => {\n    return (\n        <div className=\"container text-light\">\n            <div className=\"cards pt-4\">\n                <h1>\n                    {props.city}\n                </h1>\n                {props.lat? (<h5> <b>Lattitude</b> - {props.lat}, <b>Longitude</b> - {props.long}</h5>) : null}\n                <h5 className=\"py4\">\n                    <i className={`wi ${props.weatherIcon} display-1`}></i>\n                </h5>\n                {props.temp_celsius? (<h1 className=\"py2\"><small>Temperature in celsius</small> - {props.temp_celsius}&deg;</h1>) : null }\n                {minmaxTemp(props.temp_min,props.temp_max)}\n                {props.description? (<h4 className=\"py-3\"> <small>Weather condition is</small> <b>{props.description}</b> </h4>): null}\n            </div>\n        </div>\n    );\n};\n\nfunction minmaxTemp(min,max){\n    if(min && max){\n    return(\n        <h3>\n            <span className=\"px-4\">min - {min}&deg;</span>\n            <span className=\"px-4\">max - {max}&deg;</span>\n        </h3>\n    );\n    }\n}\n\nexport default Weather;","import React from \"react\";\nimport \"./form.style.css\";\n\nconst Form = props => {\n    return(\n        <div className=\"container\">\n            <div>{props.error? error() : null}</div>\n            <form onSubmit={props.loadWeather}> \n            <div className=\"row\">\n                <div className=\"col-md-3 offset-md-2\">\n                    <input \n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"city\"\n                    autoComplete=\"off\"\n                    placeholder=\"city\"\n                    />\n                </div>\n                <div className=\"col-md-3\">\n                <input \n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"country\"\n                    autoComplete=\"off\"\n                    placeholder=\"country\"\n                    />\n                </div>\n                <div className=\"col-md-3 mt-md-0 text-md-left\">\n                    <button className=\"btn btn-light py-2\">Get Weather</button>\n                </div>\n            </div>\n            </form>\n        </div>\n    );\n}\n\nfunction error(){\n    return(\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\n        please enter values correctly\n    </div>\n    );\n};\n\nexport default Form;","import React from 'react';\nimport './App.css';\nimport \"./weather-icons/css/weather-icons.css\";\nimport Weather from \"./components/weather.component\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Form from \"./components/form.component\";\n\nconst API_KEY = \"c6495ff8b8839c36a2991986616d8307\";\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state={\n      lat: undefined,\n      long: undefined,\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      err: false \n    };\n    this.weatherIcon={\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  get_WeatherIcon(icons,rangeId){\n    switch(true){\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({icon: this.weatherIcon.Thunderstorm});\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({icon: this.weatherIcon.Drizzle});\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({icon: this.weatherIcon.Rain});\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({icon: this.weatherIcon.Snow});\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({icon: this.weatherIcon.Atmosphere});\n        break;\n      case rangeId === 800:\n        this.setState({icon: this.weatherIcon.Clear});\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({icon: this.weatherIcon.Clouds});\n        break;\n      default:\n        this.setState({icon: this.weatherIcon.clouds});\n\n    }\n  }\n\n  calCelsius(temp){\n    let cel = Math.floor(temp - 273.15);\n    return cel;\n  }\n\n  getWeather = async(e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value; \n    if( city && country ) {\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n    const response= await api_call.json();\n    console.log(response);\n\n    this.setState({\n      city: `${response.name},${response.sys.country}`,\n      lat: response.coord.lat,\n      long: response.coord.lon,\n      celsius: this.calCelsius(response.main.temp),\n      temp_min: this.calCelsius(response.main.temp_min),\n      temp_max: this.calCelsius(response.main.temp_max),\n      description: response.weather[0].description,\n      error: false\n    });\n      this.get_WeatherIcon(this.weatherIcon,response.weather[0].id);\n  }\n    else{\n      this.setState({error: true});\n    }\n\n  };\n\n  render(){\n    return(\n      <div className=\"App\">\n        <h1 className=\"App-header\">  Weather App</h1>\n        <Form loadWeather={this.getWeather} error={this.state.error}/>\n        <Weather \n        city={this.state.city} \n        country={this.state.country}\n        lat={this.state.lat} \n        long={this.state.long}\n        temp_celsius={this.state.celsius}\n        temp_min={this.state.temp_min}\n        temp_max={this.state.temp_max}\n        description={this.state.description}\n        weatherIcon={this.state.icon}\n        />  \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}